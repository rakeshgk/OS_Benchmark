Sizing the benchmarks:
The test data has to be appropriately sized. If testing the read/write time for main memory, if the data is too small it will only reside in cache, on the other hand if data is too large it will reside in the disk as opposed to main memory.
For circumventing the cache, the benchmark has to be run in loops with increasing size(powers of 2), until a maximum size is reached.
For circumventing page faults, a small test program allocates as much memory as it can, clears the memory, and then strides through that memory one page at a time timing each reference. If any reference takes more than usual, page fault occurred.

Compile time issues:
If using the gcc compiler, use the -O flag (Optimization flag). 
However for programs measuring clock speed and context switch time, DO NOT use any kind of compile time optimization.

Multiprocessor issues:
It is possible to pin certain processes to a single CPU if you want better cache reusability, but generally processes should not be pinned because it defeats the purpose of Multi-Processing.

Clock issues:
-----To be filled by Rakesh---------------


Cache issues:
If the cache read/write time needs to be measured, then data of size less than that of cache needs to be used. The test should be run multiple times and only the last measurement needs to be recorded.

For circumventing the cache, the benchmark has to be run in loops with increasing size(powers of 2), until a maximum size is reached.

Context-switch time:
The Context switch time measurements for processes usually vary as much as 30% since the OS assigns different set of pages for each process instance. In this case, we have to run the benchmark several times and record only the minimum time.

lmbench database:
The lmbench database contains useful measurements which we can verify with.

Method for measuring read/write times for memory:
Two different types of read/write functions should be individually run and compared. First, using a standard bcopy() system call to copy data from one part of memory to the other. Second, hand-coding the loop to individually copy 8-bit words from different places in the memory. CAUTION: make sure that the memmory references don't actually point to the same page!!




